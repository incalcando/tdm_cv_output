// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// tdm_sck //
// ------- //

#define tdm_sck_wrap_target 0
#define tdm_sck_wrap 1
#define tdm_sck_pio_version 1

static const uint16_t tdm_sck_program_instructions[] = {
            //     .wrap_target
    0xe000, //  0: set    pins, 0                    
    0xe001, //  1: set    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tdm_sck_program = {
    .instructions = tdm_sck_program_instructions,
    .length = 2,
    .origin = -1,
    .pio_version = tdm_sck_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config tdm_sck_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tdm_sck_wrap_target, offset + tdm_sck_wrap);
    return c;
}
#endif

// ----------------- //
// tdm_output_clocks //
// ----------------- //

#define tdm_output_clocks_wrap_target 0
#define tdm_output_clocks_wrap 11
#define tdm_output_clocks_pio_version 1

#define tdm_output_clocks_offset_entry_point 0u

static const uint16_t tdm_output_clocks_program_instructions[] = {
            //     .wrap_target
    0xe03d, //  0: set    x, 29           side 0     
    0x9080, //  1: pull   noblock         side 2     
    0x6801, //  2: out    pins, 1         side 1     
    0x1842, //  3: jmp    x--, 2          side 3     
    0xe046, //  4: set    y, 6            side 0     
    0xb042, //  5: nop                    side 2     
    0xe03d, //  6: set    x, 29           side 0     
    0x9080, //  7: pull   noblock         side 2     
    0x6001, //  8: out    pins, 1         side 0     
    0x1048, //  9: jmp    x--, 8          side 2     
    0xa042, // 10: nop                    side 0     
    0x1086, // 11: jmp    y--, 6          side 2     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tdm_output_clocks_program = {
    .instructions = tdm_output_clocks_program_instructions,
    .length = 12,
    .origin = -1,
    .pio_version = tdm_output_clocks_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config tdm_output_clocks_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tdm_output_clocks_wrap_target, offset + tdm_output_clocks_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}
#endif

// -------------------- //
// tdm_output_no_clocks //
// -------------------- //

#define tdm_output_no_clocks_wrap_target 0
#define tdm_output_no_clocks_wrap 11
#define tdm_output_no_clocks_pio_version 1

#define tdm_output_no_clocks_offset_entry_point 0u

static const uint16_t tdm_output_no_clocks_program_instructions[] = {
            //     .wrap_target
    0xe03d, //  0: set    x, 29                      
    0x8080, //  1: pull   noblock                    
    0x6001, //  2: out    pins, 1                    
    0x0042, //  3: jmp    x--, 2                     
    0xe046, //  4: set    y, 6                       
    0xa042, //  5: nop                               
    0xe03d, //  6: set    x, 29                      
    0x8080, //  7: pull   noblock                    
    0x6001, //  8: out    pins, 1                    
    0x0048, //  9: jmp    x--, 8                     
    0xa042, // 10: nop                               
    0x0086, // 11: jmp    y--, 6                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tdm_output_no_clocks_program = {
    .instructions = tdm_output_no_clocks_program_instructions,
    .length = 12,
    .origin = -1,
    .pio_version = tdm_output_no_clocks_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config tdm_output_no_clocks_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tdm_output_no_clocks_wrap_target, offset + tdm_output_no_clocks_wrap);
    return c;
}

// These constants are the TDM clock to pio clock ratio
const int tdm_sck_program_pio_mult = 4;
const int tdm_output_clocks_program_pio_mult = 8; //put to 8 for 8 channels, the actual clock config is done in .c file
const int tdm_output_no_clocks_program_pio_mult = 8; //put to 8 for 8 channels, the actual clock config is done in .c file
static void tdm_sck_program_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t sck_pin) {
    pio_gpio_init(pio, sck_pin);
    pio_sm_config sm_config = tdm_sck_program_get_default_config(offset);
    sm_config_set_set_pins(&sm_config, sck_pin, 1);
    uint pin_mask = (1u << sck_pin);
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask);  // zero output
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
    pio_sm_init(pio, sm, offset, &sm_config);
}
static inline void tdm_out_with_clocks_program_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t bit_depth, uint8_t dout_pin, uint8_t clock_pin_base) {
    pio_gpio_init(pio, dout_pin);
    pio_gpio_init(pio, clock_pin_base);
    pio_gpio_init(pio, clock_pin_base + 1);
    pio_sm_config sm_config = tdm_output_clocks_program_get_default_config(offset);
    sm_config_set_out_pins(&sm_config, dout_pin, 1);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, false, bit_depth);
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &sm_config);
    uint32_t pin_mask = (1u << dout_pin) | (3u << clock_pin_base);
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask);  // zero output
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
}
static inline void tdm_out_no_clocks_program_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t bit_depth, uint8_t dout_pin) {
    pio_gpio_init(pio, dout_pin);
    pio_sm_config sm_config = tdm_output_no_clocks_program_get_default_config(offset);
    sm_config_set_out_pins(&sm_config, dout_pin, 1);
    sm_config_set_out_shift(&sm_config, false, false, bit_depth);
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &sm_config);
    uint32_t pin_mask = (1u << dout_pin); //need to double check how that properly works
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask);  // zero output
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
}

#endif

